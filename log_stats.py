from datetime import datetime
from pymongo.errors import PyMongoError
from log_writer import with_mongo_connection


def show_statistics() -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
    1 ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤;
    2 ‚Äî —Ç–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É.
    """
    print("\nWhich statistics would you like to see?")
    print("1 ‚Äî Last 5 unique requests")
    print("2 ‚Äî Top 5 popular requests")

    choice = input("Enter number (1 or 2): ").strip()

    if choice == "1":
        results = get_recent_requests()
        if not results:
            print("‚ùó Unable to retrieve statistics.")
            return

        print("\nüìå Last 5 unique requests:")
        for r in results:
            ts = datetime.fromisoformat(r['timestamp']).strftime("%Y-%m-%d %H:%M:%S")
            search_type = r.get("search_type", "unknown")
            params = r["_id"]

            if search_type == "keyword":
                keyword = params.get("keyword", "?")
                print(f"üìÖ Date: {ts} | üîç Type: {search_type:<12} | üîë Keyword: '{keyword}'")
            else:
                genre = params.get("genre", "?")
                y_from = params.get("year_from", "?")
                y_to = params.get("year_to", "?")
                print(f"üìÖ Date: {ts} | üîç Type: {search_type:<12} | üé¨ Genre: {genre} ({y_from}‚Äì{y_to})")

    elif choice == "2":
        results = get_popular_requests()
        if not results:
            print("‚ùó Unable to retrieve statistics.")
            return

        print("\n‚≠ê Top 5 popular requests:")
        for r in results:
            search_type = r.get("search_type", "unknown")
            params = r["_id"]
            count = r.get("count", "?")

            if search_type == "keyword":
                keyword = params.get("keyword", "?")
                print(f"üîç Type: {search_type:<12} | üîë Keyword: '{keyword}' ‚Üí {count} requests")
            else:
                genre = params.get("genre", "?")
                y_from = params.get("year_from", "?")
                y_to = params.get("year_to", "?")
                print(f"üîç Type: {search_type:<12} | üé¨ Genre: {genre} ({y_from}‚Äì{y_to}) ‚Üí {count} requests")

    else:
        print("Invalid input. Returning to menu.")


@with_mongo_connection
def get_recent_requests(collection) -> list[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.

    :param collection: –ö–æ–ª–ª–µ–∫—Ü–∏—è MongoDB (–ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º).
    :return: –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    try:
        pipeline = [
            {"$sort": {"timestamp": -1}},
            {"$group": {
                "_id": "$params",
                "timestamp": {"$first": "$timestamp"},
                "search_type": {"$first": "$search_type"}
            }},
            {"$sort": {"timestamp": -1}},
            {"$limit": 5}
        ]
        return list(collection.aggregate(pipeline))
    except PyMongoError as e:
        print(f"Aggregation error (recent): {e}")
        return []


@with_mongo_connection
def get_popular_requests(collection) -> list[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.

    :param collection: –ö–æ–ª–ª–µ–∫—Ü–∏—è MongoDB (–ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º).
    :return: –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —á–∏—Å–ª–æ–º –≤—ã–∑–æ–≤–æ–≤.
    """
    try:
        pipeline = [
            {"$group": {
                "_id": "$params",
                "count": {"$sum": 1},
                "search_type": {"$first": "$search_type"}
            }},
            {"$sort": {"count": -1}},
            {"$limit": 5}
        ]
        return list(collection.aggregate(pipeline))
    except PyMongoError as e:
        print(f"Aggregation error (popular): {e}")
        return []
