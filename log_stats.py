from datetime import datetime
from pymongo import MongoClient
from pymongo.errors import PyMongoError
from config import MONGODB_URI, MONGODB_DB, MONGODB_COLLECTION


def show_statistics() -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

    1 ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤;
    2 ‚Äî —Ç–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É.
    """
    print("\nWhich statistics would you like to see?")
    print("1 ‚Äî Last 5 unique requests")
    print("2 ‚Äî Top 5 popular requests")

    choice = input("Enter number (1 or 2): ").strip()

    if choice == "1":
        try:
            results = get_recent_requests()
            print("\nüìå Last 5 unique requests:")
            for r in results:
                ts = datetime.fromisoformat(r['timestamp']).strftime("%Y-%m-%d %H:%M:%S")
                search_type = r.get("search_type", "unknown")
                params = r["_id"]

                if search_type == "keyword":
                    keyword = params.get("keyword", "?")
                    print(f"üìÖ Date: {ts} | üîç Type: {search_type:<12} | üîë Keyword: '{keyword}'")
                else:
                    genre = params.get("genre", "?")
                    y_from = params.get("year_from", "?")
                    y_to = params.get("year_to", "?")
                    print(f"üìÖ Date: {ts} | üîç Type: {search_type:<12} | üé¨ Genre: {genre} ({y_from}‚Äì{y_to})")

        except (KeyError, PyMongoError) as e:
            print(f"Error retrieving recent requests: {e}")

    elif choice == "2":
        try:
            results = get_popular_requests()
            print("\n‚≠ê Top 5 popular requests:")
            for r in results:
                search_type = r.get("search_type", "unknown")
                params = r["_id"]
                count = r.get("count", "?")

                if search_type == "keyword":
                    keyword = params.get("keyword", "?")
                    print(f"üîç Type: {search_type:<12} | üîë Keyword: '{keyword}' ‚Üí {count} requests")
                else:
                    genre = params.get("genre", "?")
                    y_from = params.get("year_from", "?")
                    y_to = params.get("year_to", "?")
                    print(f"üîç Type: {search_type:<12} | üé¨ Genre: {genre} ({y_from}‚Äì{y_to}) ‚Üí {count} requests")

        except (KeyError, PyMongoError) as e:
            print(f"Error retrieving popular requests: {e}")
    else:
        print("Invalid input. Returning to menu.")


def get_recent_requests() -> list[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ MongoDB.

    Returns:
        list[dict]: –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∑–∞–ø—Ä–æ—Å–∞.
    """
    try:
        with MongoClient(MONGODB_URI) as client:
            collection = client[MONGODB_DB][MONGODB_COLLECTION]

            pipeline = [
                {"$sort": {"timestamp": -1}},
                {"$group": {
                    "_id": "$params",
                    "timestamp": {"$first": "$timestamp"},
                    "search_type": {"$first": "$search_type"}
                }},
                {"$sort": {"timestamp": -1}},
                {"$limit": 5}
            ]
            return list(collection.aggregate(pipeline))

    except PyMongoError as e:
        print(f"Aggregation error (recent): {e}")
        return []


def get_popular_requests() -> list[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-5 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ MongoDB –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

    Returns:
        list[dict]: –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.
    """
    try:
        with MongoClient(MONGODB_URI) as client:
            collection = client[MONGODB_DB][MONGODB_COLLECTION]

            pipeline = [
                {"$group": {
                    "_id": "$params",
                    "count": {"$sum": 1},
                    "search_type": {"$first": "$search_type"}
                }},
                {"$sort": {"count": -1}},
                {"$limit": 5}
            ]
            return list(collection.aggregate(pipeline))

    except PyMongoError as e:
        print(f"Aggregation error (popular): {e}")
        return []
